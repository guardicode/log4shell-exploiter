from ipaddress import IPv4Address
from pathlib import PurePosixPath, PureWindowsPath
from unittest.mock import MagicMock

import pytest
from log4shell_exploiter.log4shell_command_builder import build_log4shell_command
from agentpluginapi import (
    IAgentCommandBuilderFactory,
    ILinuxAgentCommandBuilder,
    IWindowsAgentCommandBuilder,
    TargetHost,
)
from monkeytypes import OperatingSystem

EXPECTED_COMMAND = "LOG4SHELL_RCE"
HOST_IP = IPv4Address("1.1.1.1")


@pytest.fixture
def linux_agent_command_builder() -> ILinuxAgentCommandBuilder:
    mock_command_builder = MagicMock(spec=ILinuxAgentCommandBuilder)
    mock_command_builder.get_command.return_value = EXPECTED_COMMAND
    return mock_command_builder


@pytest.fixture
def windows_agent_command_builder() -> IWindowsAgentCommandBuilder:
    mock_command_builder = MagicMock(spec=IWindowsAgentCommandBuilder)
    mock_command_builder.get_command.return_value = EXPECTED_COMMAND
    return mock_command_builder


@pytest.fixture
def agent_command_builder_factory(
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
) -> IAgentCommandBuilderFactory:
    agent_command_builder_factory = MagicMock(spec=IAgentCommandBuilderFactory)
    agent_command_builder_factory.create_linux_agent_command_builder.return_value = (
        linux_agent_command_builder
    )
    agent_command_builder_factory.create_windows_agent_command_builder.return_value = (
        windows_agent_command_builder
    )

    return agent_command_builder_factory


@pytest.fixture
def build_command(monkeypatch, agent_command_builder_factory: IAgentCommandBuilderFactory):
    def build(host: TargetHost) -> str:
        monkeypatch.setattr(
            "log4shell_exploiter.log4shell_command_builder.get_agent_dst_path",
            lambda _: PurePosixPath("/tmp/agent")
            if host.operating_system == OperatingSystem.LINUX
            else PureWindowsPath("C:\\Windows\\Temp\\agent.exe"),
        )
        return build_log4shell_command(
            host,
            "http://download.me",
            agent_command_builder_factory,
        )

    return build


@pytest.mark.parametrize("os", [OperatingSystem.WINDOWS, None])
def test_windows_command(
    build_command,
    os,
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
):
    actual_command = build_command(TargetHost(ip=HOST_IP, operating_system=os))

    linux_agent_command_builder.get_command.assert_not_called()
    windows_agent_command_builder.get_command.assert_called_once()
    assert actual_command == EXPECTED_COMMAND


def test_linux_command(
    build_command,
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
):
    actual_command = build_command(TargetHost(ip=HOST_IP, operating_system=OperatingSystem.LINUX))

    windows_agent_command_builder.get_command.assert_not_called()
    linux_agent_command_builder.get_command.assert_called_once()
    assert actual_command == EXPECTED_COMMAND
